# .github/workflows/main.yml

name: Generate Post and Deploy Blog

# 워크플로우 트리거 설정
on:
  schedule:
    - cron: '0 4 * * 1-5'  # 새 설정: 월~금 오후 1:00 KST (월~금 04:00 UTC)


  # 2. main 브랜치에 push 이벤트 발생 시 실행
  push:
    branches:
      - master # 또는 master 등 기본 브랜치 이름

  # 3. 수동 실행 가능하도록 설정 (선택 사항)
  workflow_dispatch:

jobs:
  # 첫 번째 잡: law.py 스크립트 실행하여 새 포스트 생성 및 main 브랜치에 푸시
  generate-post:
    # 스케줄 또는 수동 실행 시에만 이 잡 실행
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    # 생성된 파일을 main 브랜치에 푸시할 수 있도록 쓰기 권한 설정
    permissions:
      contents: write

    steps:
      - name: Checkout main branch 🛎️
        uses: actions/checkout@v4
        with:
          ref: master # main 브랜치를 체크아웃

      - name: Set up Python 🐍
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' # 또는 원하는 Python 버전

      - name: Install Python Dependencies 📦
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Chrome/Chromedriver는 Selenium Manager가 처리하므로 별도 설치 불필요할 수 있음
      # 만약 Runner 환경 문제 시 아래 주석 해제 시도
      # - name: Setup Chrome # Chrome 설치 (필요한 경우)
      #   uses: browser-actions/setup-chrome@v1

      - name: Run law.py to generate post 📝
        run: python law.py
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} # GitHub Secrets에서 API 키 가져오기

      - name: Commit and Push new post file 🚀
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          # git pull # 충돌 방지를 위해 Pull 먼저 실행 (선택 사항)
          # 생성된 파일 확인 (스크립트가 _articles/*.md 형태로 생성한다고 가정)
          git add _articles/*.md downloads/* # 다운로드 폴더 내용 변경도 포함 (선택 사항)
          # 변경사항이 있을 때만 커밋 및 푸시
          git diff --staged --quiet || git commit -m "feat: Add new blog post from NARS report"
          git push origin master

  # 두 번째 잡: main 브랜치 푸시 시 블로그 빌드 및 gh-pages 브랜치로 배포
  deploy-blog:
    # main 브랜치 푸시 시에만 이 잡 실행 (generate-post 잡이 완료된 후에도 실행됨)
    # generate-post 잡이 성공적으로 새 글을 푸시하면 이 잡이 트리거됨
    needs: generate-post # 스케줄 실행 시 generate-post 잡이 완료된 후에 실행되도록 함 (선택적)
    # if 조건 추가: generate-post 잡이 실행되었거나(스케줄) 직접 푸시했을 때만 실행
    if: always() && (needs.generate-post.result == 'success' || github.event_name == 'push')
    runs-on: ubuntu-latest

    permissions:
      contents: write # 이 잡에서 GITHUB_TOKEN에 쓰기 권한 부여

    steps:
      - name: Checkout main branch 🛎️
        uses: actions/checkout@v4
        with:
           ref: master # 배포할 소스코드가 있는 브랜치

      - name: Set up Node.js ⚙️
        uses: actions/setup-node@v4
        with:
          node-version: '18' # 'Handmade Blog'가 요구하는 버전 확인 필요
          cache: 'npm'

      - name: Install Node.js Dependencies 📦
        run: npm ci

      - name: Build Blog 🔧
        run: npm run build # 'dist' 폴더 생성

      - name: Deploy to gh-pages branch 🚀
        uses: peaceiris/actions-gh-pages@v3 # 또는 v4 등 최신 버전 확인
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist        # 배포할 폴더 (빌드 결과물)
          publish_branch: gh-pages   # 배포 대상 브랜치
          user_name: 'github-actions[bot]' # 커밋 사용자 이름
          user_email: 'github-actions[bot]@users.noreply.github.com' # 커밋 사용자 이메일
          commit_message: "Deploy blog updates to gh-pages" # 커밋 메시지